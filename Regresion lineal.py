# -*- coding: utf-8 -*-
"""Parcial3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NCOmNlUPlMVG9ibEzQVrjHI6OTRnMVgR

*   Nicolás Sira CI: 27.290.740
*   Yonny Barrios CI: 25.571.239

*   Alejandro Vegas CI: 25.627.878









---

# Trabajo de Estadística Matemáticas

*   Fecha de entrega: 27/01/2023.

El archivo data.csv incluye un número de ejemplos de beneficiarios inscritos en un plan de seguro indicando las características del paciente, así como el total de gastos médicos cargados (charges) al plan para el año calendario. 

Las características son:

* Edad (age): un número entero que indica la edad del beneficiario principal (excluyendo los mayores de 64 años, ya que generalmente están cubiertos por el gobierno de Estados Unidos).

* Sexo (sex): el sexo del titular de la póliza, ya sea masculino o femenino.

* Bmi: el índice de masa corporal. El bmi es igual al peso (en kilogramos) divididos por altura (en metros) al cuadrado. Un bmi ideal está en un rango de 18.5 a 24.9.

* Hijos (children): un número entero que indica el número de hijos dependientes cubiertos por el plan de seguro.

* Fumador (smoker): una variable categórica que indica si el asegurado fuma regularmente.
* Región: el lugar de residencia del beneficiario en los Estados Unidos, dividido en cuatro regiones geográficas: noreste, sureste, suroeste o noroeste.

Observe que estas variables pueden estar relacionadas con las facturas de gastos médicos. Por
ejemplo, podríamos esperar que las personas mayores y los fumadores estén en mayor riesgo de
grandes gastos médicos.

## 1. Realice una exploración sobre los datos (estadísticas descriptivas).
"""

## Escriba aquí su repuesta
#Import
import pandas as pd 

data = pd.read_csv('data.csv')

#Estadisticas descriptivas 
sep=(f"\n{'='*70}")
print("Muestras del DataFrame")
print(data.head())
print(data.tail())
print(sep)
print('Informacion sobre el DataFrame')
print(data.info())
print(sep)
print('Descripcion de el DataFrame')
print(data.describe())

"""## 2. Calcule la relación entre las variables (matriz de correlaciones)."""

## Escriba aquí su repuesta
#Import
from prettytable import PrettyTable

#Solo tomaremos en cuenta los valores numericos
numeric_data=data.select_dtypes(include='number')
#El metodo corr() regresa una matriz correlacional 
matriz_corr= numeric_data.corr()

print("Matriz de correlación para las variables numericas:")
x=PrettyTable()
x.field_names= numeric_data.columns.tolist()

for i in range(0,len(matriz_corr)):
  x.add_row(matriz_corr.iloc[i])
print(x)

"""Se necesita utilizar otro tipo de correlacion para las variables que son no numericas, ya que la conversion de objeto a numero no se puede hacer directamente, se utilizara una tabla de contingencia con el metodo chi^2, traido de la libreria scipy"""

# Calcular coeficiente de correlación para variables no numéricas
#import
from scipy.stats import chi2_contingency

for column in data.columns:
  if data[column].dtype == 'object':
     # Crear tabla de contingencia normalizada
       cross_tab = pd.crosstab(data[column], data['expenses'])
       # Calcular estadísticas de chi-cuadrado
       stat, p, dof, expected = chi2_contingency(cross_tab)

       print(sep)
       print(f"Correlación entre {column} y gastos es {p}")

"""## 3. Visualice la relación entre las variables (gráficos)."""

## Se usa libreria Seaborn para la visualizacion 
#imports
import seaborn as sns 
import matplotlib.pyplot as plt

data['expenses_group'] = pd.cut(data['expenses'], bins=[0,2500,5000,7500,10000,12500,15000,17500,20000,22500,25000,30000])
expenses_counts = data['expenses_group'].value_counts()
expenses_counts.plot.bar()
plt.title('Gastos en el DataFrame')
plt.xlabel('Rangos de gasto')
plt.ylabel('Ocurrencias')
plt.show()
print(sep)

## EGrafico de la relacion de los gastos con respecto a la edad

#Grafico de la ocurrencia de las edades en el dataframe
data['age_group'] = pd.cut(data['age'], bins=[0,10,20,30,40,50,60,70,80,90,100])
age_counts = data['age_group'].value_counts()
age_counts.plot.bar()
plt.title('Edades en la data')
plt.xlabel('Rangos de edad')
plt.ylabel('Ocurrencias')
plt.show()
print(sep)
#Grafico de la relacion Edad vs Gasto
sns.lineplot(x='age', y='expenses', data=data)
plt.xlabel("Edad")
plt.ylabel("Gastos")
plt.title("Relacion de la edad contra los gastos")
plt.show()

data["bmi_group"] = pd.cut(data["bmi"], 
                           #Asignamos los valores del bmi correspondiente a cada categoria
                           bins=[0, 18.5, 25, 30, 45], 
                           labels=["bajo peso", "peso normal", "sobrepeso", "obesidad"])
#grafico de ocurrencias del BMI
bmi_group_counts = data['bmi_group'].value_counts()
bmi_group_counts.plot.pie(autopct='%1.1f%%')
plt.title('Ocurrencias de BMI')
plt.show()
print(sep)
#Grafico de relacion entre BMI y Gastos

sns.lineplot(x='bmi_group', y='expenses', data=data)
plt.xlabel("Categories of BMI")
plt.ylabel("Expenses")
plt.title("Bar plot of BMI Categories vs Expenses")
plt.show()

#grafico de pastel para las ocurrencias 
sex_counts = data['sex'].value_counts()
labels = ["Hombre" if x == "male" else "Mujer" for x in sex_counts.index]
colors = ["lightblue" if x == "male" else "pink" for x in sex_counts.index]

sex_counts.plot.pie(autopct='%1.1f%%',labels=labels, colors=colors)
plt.title('Ocurrencias de sexo')
plt.show()
print(sep)
#Grafico de barras para la relacion de gastos con respecto al sexo
sns.barplot(x='sex', y='expenses', data=data, palette={"male":"lightblue", "female":"pink"})
plt.xlabel("Sexo")
plt.ylabel("Gastos")
plt.title("Grafico de barras para la relacion de gastos con respecto al sexo")
plt.show()

#ocurrencias de la variable fumador
smoker_counts = data['smoker'].value_counts()
labels = ["Fumadores" if x == "yes" else "No fumadores" for x in sex_counts.index]

smoker_counts.plot.pie(autopct='%1.1f%%',labels=labels)
plt.title('Ocurrencias de fumadores')
plt.show()
print(sep)
#Grafico de la relacion fumador vs gastos
ax = plt.gca()
sns.barplot(x='smoker', y='expenses', data=data)
plt.xlabel("Fumador")
plt.ylabel("Gastos")
plt.title("Gráfico de barras de Fumador vs Gastos")
ax.set_xticklabels(["No fumador", "Fumador"])
plt.show()

#ocurrencias de la variable region
region_counts = data['region'].value_counts()
region_counts.plot.pie(autopct='%1.1f%%')
plt.title('Ocurrencias de regiones')
plt.show()
print(sep)
#Grafico de la relacion Region contra Gastos
sns.barplot(x='region', y='expenses', data=data)
plt.xlabel("Region")
plt.ylabel("Gastos")
plt.title("Relacion de la region y los gastos")
plt.show()

#ocurrencias de la variable niños
children_counts = data['children'].value_counts()
children_counts.plot.pie(autopct='%1.1f%%')
plt.title('Ocurrencias de niños')
plt.show()
print(sep)
#Grafico de la relacion Niños contra Gastos
ax = plt.gca()
sns.lineplot(x='children', y='expenses', data=data)
plt.xlabel("Niños")
plt.ylabel("Gastos")
plt.title("Gráfico de barras de Niños vs Gastos")
ax.set_xticklabels([0,1,2,3,4,5,6])
plt.show()

"""## 4. Contraste la hipótesis de que en las 4 regiones se tiene en promedio el mismo índice de masa corporal bmi (Análisis de varianzas)."""

""" 
Escriba aquí su repuesta:
Para contrastar la hipótesis de que el promedio de bmi es igual en las cuatro regiones, 
se puede utilizar un test estadístico llamado "test de igualdad de varianzas" o 
"test de Levene". Este test determina si existen diferencias significativas 
entre las varianzas de los grupos.
"""
from scipy.stats import levene
#Se ejecuta la prueba de levene
region_groups = data.groupby("region")["bmi"]
statistic, p = levene(region_groups.get_group("northeast"), region_groups.get_group("northwest"),
       region_groups.get_group("southeast"), region_groups.get_group("southwest"))
#Tomamos un alpha que sea el valor significancia 
alpha = float(input('Ingrese el valor de significancia(ej; 0.05):' ))
print("Valor de Alpha: {}".format(alpha))
print(sep)
print("Resultado de P: {:.9f}".format(p))
print(sep)
if p > alpha:
    print("La hipótesis de que el promedio de bmi es igual en las 4 regiones es verdadera")
else:
    print("La hipótesis de que el promedio de bmi es igual en las 4 regiones es falsa")

"""## 5. Obtenga un modelo lineal que pueda predecir el total de gastos médicos cargados para un beneficiario."""

## Escriba aquí su repuesta
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder

#No se debe modificar la data existente para las graficas de la pregunta 3
data_modelo=data.copy()
# Separa los datos en variables independientes y dependiente
#Se usa LabelEncoder para las variables no numericas
le = LabelEncoder()
data_modelo["sex"] = le.fit_transform(data_modelo["sex"])
data_modelo["smoker"] = le.fit_transform(data_modelo["smoker"])
data_modelo["region"] = le.fit_transform(data_modelo["region"])

X = data_modelo[["age", "sex", "bmi", "children", "smoker", "region"]]
y = data_modelo["expenses"]

# Separa los datos en datos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crea el modelo y entrena con los datos de entrenamiento
reg = LinearRegression().fit(X_train, y_train)

# Realiza predicciones con los datos de prueba
y_pred = reg.predict(X_test)

# Evalúa el rendimiento del modelo
mse = mean_squared_error(y_test, y_pred)
r2 = reg.score(X_test, y_test)

# Imprime los resultados
print("El modelo tiene un error cuadrático medio de {:.2f}, lo que significa que, en promedio, el modelo se equivoca en los gastos médicos en un monto de ${:.2f}.".format(mse, mse))
print("El modelo explica el {:.2f}% de la variación en los gastos médicos".format(r2*100))



# Realiza predicciones con nuevos datos
#Se piden los datos al usuario
age = int(input("Ingrese la edad: "))
sex = ""
while sex not in ["male", "female"]:
    sex = input("Ingrese el sexo (male/female): ").lower()
bmi = float(input("Ingrese el índice de masa corporal (BMI): "))
children = int(input("Ingrese el número de niños: "))
smoker = ""
while smoker not in ["yes", "no"]:
    smoker = input("Ingrese si es fumador (yes/no): ").lower()
region = ""
while region not in ["southwest", "northwest", "southeast", "northeast"]:
    region = input("Ingrese la región (southwest/northwest/southeast/northeast): ").lower()

new_data = {"age": age, "sex": sex, "bmi": bmi, "children": children, "smoker": smoker, "region": region}
df = pd.DataFrame(new_data, index=[0])
#Se transforman los datos 
df["sex"] = le.fit_transform(df["sex"])
df["smoker"] = le.fit_transform(df["smoker"])
df["region"] = le.fit_transform(df["region"])
#Se realiza e imprime la prediccion 
expenses_pred = reg.predict(df)
print("La prediccion de los gastos medico es: ${:.2f}".format(expenses_pred[0]))

"""## 6. Contraste la hipótesis $H_0: \beta_i=0$ vs $H_1: \beta_i\neq 0$. Donde son los coeficientes del modelo."""

import statsmodels.api as sm

coefs = reg.coef_
indep = ["age", "sex", "bmi", "children", "smoker", "region"]
print("Los siguientes factores son los que más contribuyen a la predicción de los gastos médicos:")

X_2 = sm.add_constant(X)
model = sm.OLS(y, X_2)
results = model.fit()
p_values = results.pvalues
alpha = float(input('Ingrese el valor de significancia(ej; 0.05):' ))
for i in range(len(coefs)):
  print(sep)
  if p_values[i]<alpha:
    print("{} con un coeficiente de {:-2f}".format(indep[i],coefs[i]))
    print('Es estadisticamente significativo')
  else:
    print("{} con un coeficiente de {:.2f} ".format(indep[i],coefs[i]))
    print('No es estadisticamente significativo')

"""El valor p es el p-valor asociado con la hipótesis nula de que el coeficiente es igual a cero. Si el valor p es menor que el nivel de significancia establecido (por ejemplo, 0.05), entonces se rechaza la hipótesis nula y se concluye que el coeficiente es estadísticamente distinto de cero.

## 7. Calcule el coeficiente de determinación.
"""

## Escriba aquí su repuesta
R_squared = reg.score(X, y)
print(sep)
print("El coeficiente de determinación es: {:.2f}".format(R_squared))
print(sep)

"""## 8. Realice un análisis de los residuos."""

import matplotlib.pyplot as plt
import scipy.stats as stats

# Calcular los residuos
y_pred = reg.predict(X)
residuals = y - y_pred

# Crear figura con dos subplots
fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))

# Crear Q-Q plot en primer subplot
stats.probplot(residuals, dist="norm", plot=ax1)
ax1.set_title("Grafico Q-Q")
ax1.set_xlabel("Teórico Quantiles")
ax1.set_ylabel("Residuos Quantiles")
ax1.grid(True)

# Crear gráfico de residuales vs predicciones en segundo subplot
ax2.scatter(y_pred, residuals)
ax2.set_xlabel("Predicciones")
ax2.set_ylabel("Residuales")
ax2.axhline(y=0, color='r', linestyle='-')
ax2.set_title("Residuales vs Predicciones")
ax2.grid(True)

plt.show()

"""## 9. Incluya una nueva variable al modelo, la interacción entre las variables Fumador y BMI. Calcule el coeficiente de determinación para este modelo. Explique los resultados obtenidos."""

new_data_copy = data.copy()
new_data_copy["smoker"] = new_data_copy["smoker"].map({"yes": 1, "no": 0})
new_data_copy["bmi_smoker_interaction"] = new_data_copy["smoker"] * new_data_copy["bmi"]


# Separa los datos en variables independientes y dependiente
#Se usa LabelEncoder para las variables no numericas
le = LabelEncoder()
new_data_copy["sex"] = le.fit_transform(new_data_copy["sex"])
new_data_copy["smoker"] = le.fit_transform(new_data_copy["smoker"])
new_data_copy["region"] = le.fit_transform(new_data_copy["region"])

X = new_data_copy[["age", "sex", "bmi", "children", "smoker", "region","bmi_smoker_interaction"]]
y = new_data_copy["expenses"]

# Separa los datos en datos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crea el modelo y entrena con los datos de entrenamiento
reg = LinearRegression().fit(X_train, y_train)


R_squared_new = reg.score(X, y)
print(sep)
print("El nuevo coeficiente de determinación es: {:.2f}".format(R_squared_new))
print(sep)
if (R_squared > R_squared_new):
  print('El antiguo coeficiente = {:.2f} es mayor'.format(R_squared))
elif(R_squared< R_squared_new):
  print('El antiguo coeficiente = {:.2f} es menor'.format(R_squared))
else: 
  print('El antiguo coeficiente = {:.2f} es igual'.format(R_squared))

"""En este caso, la variable bmi_smoker_interaction es una interacción entre dos variables: smoker y bmi. Esta variable puede capturar patrones adicionales en los datos que no se pueden explicar con las variables individuales. Por ejemplo, puede haber un efecto diferente en los gastos médicos para fumadores con un BMI alto en comparación con fumadores con un BMI bajo o no fumadores con un BMI alto.
La variable bmi_smoker_interaction puede proporcionar información adicional sobre la relación entre las variables independientes y la variable dependiente (expenses) y, por lo tanto, puede mejorar el ajuste del modelo. Por eso el R² subió al añadir esta variable al modelo.
"""